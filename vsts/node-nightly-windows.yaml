name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  - repo: self
    clean: true

# Manual trigger only
trigger: none
pr: none

parameters:
- name: buildAgentPoolVar
  displayName: 'Build agent pool'
  type: string
  default: 'BuildAgentPool'
- name: buildAgentVmImageVar
  displayName: 'Build agent image'
  type: string
  default: 'BuildAgentImage'
- name: release
  displayName: 'Release to SDK partner storage account'
  type: boolean
  default: false

variables:
- name: vmImage
  value: $[variables.${{ parameters.buildAgentVmImageVar }}]
- name: buildPool
  value: $[variables.${{ parameters.buildAgentPoolVar }}]

jobs:
- job: Phase_1
  displayName: 'Windows Node 14.x'
  condition: succeededOrFailed()
  pool:
    name: $(buildPool)
    vmImage: $(vmImage)
    demands:
      - ImageOverride -equals $(vmImage)
  steps:
  - task: NodeTool@0
    displayName: 'Use Node 14.x'
    inputs:
      versionSpec: '14.x'


  - script: 'call lerna run ci'
    displayName: 'Unit & Integration Tests'
    env:
      IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)


  - task: PublishTestResults@2
    displayName: 'Publish Test Results | Mocha'
    inputs:
      testResultsFiles: 'e2etests/test-results.*.xml'
      mergeTestResults: true
      testRunTitle: 'E2E Tests - Windows'
    condition: succeededOrFailed()

  # - task: DownloadBuildArtifacts@0
  #   condition: ${{ parameters.release }}
  #   inputs:
  #     buildType: 'specific'
  #     project: 'f9b79625-2860-4d92-a4ee-57b03fabfd10' # azure-iot-sdks
  #     pipeline: '296' # iot-sdks-internals-scripts pipeline
  #     buildVersionToDownload: 'latest'
  #     downloadType: 'single'
  #     downloadPath: '$(System.ArtifactsDirectory)/scripts'
  #     artifactName: 'node'

  # - powershell: |
  #     . $(System.ArtifactsDirectory)/scripts/node/release-node.ps1
  #     $outputFolder = $env:output
  #     Build-Artifacts -Sources $env:sources -Output $outputFolder
  #   displayName: 'npm pack'
  #   condition: ${{ parameters.release }}
  #   env:
  #     sources: $(Build.SourcesDirectory)
  #     output: $(Build.ArtifactStagingDirectory)\_out

  - powershell: |
      $archiveName = npm.cmd pack

      if ($LASTEXITCODE -ne 0) {
        throw "Last exit code is ($LASTEXITCODE)"
      }

      mkdir _out
      cp $archiveName .\out\

  - task: PublishBuildArtifacts@1
    # condition: ${{ parameters.release }}
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)\_out
      ArtifactName: drop
      publishLocation: 'Container'

  # - task: AzureFileCopy@2
  #   displayName: 'Copy Release Artifacts to Partner Release Pipeline'
  #   condition: ${{ parameters.release }}
  #   inputs:
  #     SourcePath: $(Build.ArtifactStagingDirectory)\_out
  #     azureSubscription: azuresdkpartnerdrops
  #     Destination: AzureBlob
  #     storage: azuresdkpartnerdrops
  #     ContainerName: 'drops/azure-iot-sdk/node/'
