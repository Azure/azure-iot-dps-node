name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  - repo: self
    clean: true

# Manual trigger only
trigger: none
pr: none

parameters:
- name: buildAgentPoolVar
  displayName: 'Build agent pool'
  type: string
  default: 'BuildAgentPool'
- name: buildAgentVmImageVar
  displayName: 'Build agent image'
  type: string
  default: 'BuildAgentImage'
- name: release
  displayName: 'Release to SDK partner storage account'
  type: boolean
  default: false

variables:
- name: vmImage
  value: $[variables.${{ parameters.buildAgentVmImageVar }}]
- name: buildPool
  value: $[variables.${{ parameters.buildAgentPoolVar }}]
- name: buildFolder
  value: $[ format('{0:yyyy}-{0:MM}-{0:dd}', pipeline.startTime) ]

stages:
- stage: SDL
  jobs:
  - job: sdl_checks
    displayName: 'SDL checks'
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: common/sdl_steps.yaml

- stage: Test
  dependsOn: ['SDL']
  jobs:
  - job: run_tests
    displayName: 'Tests - Windows Node 14.x'
    pool:
      name: $(buildPool)
      vmImage: $(vmImage)
      demands:
        - ImageOverride -equals $(vmImage)
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 14.x'
      inputs:
        versionSpec: '14.x'

    # Unit tests
    - script: |
        npm install
        npm run build
        npm run ci
      displayName: 'Unit Tests'
      env:
        IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)

    # Int tests
    - script: |
        cd e2e
        npm install
        npm run e2e
      displayName: 'E2E Tests'
      env:
        IOT_PROVISIONING_DEVICE_IDSCOPE: $(IOT-PROVISIONING-DEVICE-IDSCOPE)
        IOT_PROVISIONING_SERVICE_CONNECTION_STRING: $(IOT-PROVISIONING-SERVICE-CONNECTION-STRING)
        IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
        IOT_PROVISIONING_DEVICE_ENDPOINT: $(IOT-PROVISIONING-DEVICE-ENDPOINT)
        IOT_PROVISIONING_ROOT_CERT: $(IOT-PROVISIONING-ROOT-CERT)
        IOT_PROVISIONING_ROOT_CERT_KEY: $(IOT-PROVISIONING-ROOT-CERT-KEY)
        DPS_GLOBAL_DEVICE_ENDPOINT_INVALID_CERT: $(DPS-GLOBAL-DEVICE-ENDPOINT-INVALID-CERT)
        DPS_CONN_STRING_INVALID_CERT: $(DPS-CONN-STRING-INVALID-CERT)
        IOTHUB_CA_ROOT_CERT: $(IOTHUB-CA-ROOT-CERT)
        IOTHUB_CA_ROOT_CERT_KEY: $(IOTHUB-CA-ROOT-CERT-KEY)

    # Publish test results
    - task: PublishTestResults@2
      displayName: 'Publish Test Results | Mocha'
      inputs:
        testResultsFiles: 'e2etests/test-results.*.xml'
        mergeTestResults: true
        testRunTitle: 'E2E Tests - Windows'
      condition: succeededOrFailed()

- stage: Pack
  dependsOn: ['SDL', 'Test']
  jobs:
  - job: pack
    displayName: 'Package for Release'
    pool:
      name: $(buildPool)
      vmImage: $(vmImage)
      demands:
        - ImageOverride -equals $(vmImage)
    steps:

    # Pack npm archive
    - task: PowerShell@2
      displayName: 'Create NPM pack archive'
      inputs:
        targetType: inline
        script: |
          $package = npm pack
          echo "##vso[task.setvariable variable=package]$package"
        workingDirectory: $(Build.SourcesDirectory)

    # copy packed npm archive to artifact staging / dist
    - task: CopyFiles@2
      displayName: 'Copy packed archive to artifact staging'
      inputs:
        contents: $(package)
        targetFolder: $(Build.ArtifactStagingDirectory)
        sourceFolder: $(Build.SourcesDirectory)

    # run SBOM in artifact staging
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generate software manifest for executable'
      inputs:
        BuildDropPath: $(Build.ArtifactStagingDirectory)

    # publish artifacts to pipeline
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: azure-iot-dps-node

    # copy packed npm archive dated folder for release archive
    - task: CopyFiles@2
      displayName: 'Copy packed archive to artifact staging'
      inputs:
        contents: $(package)
        targetFolder: $(Build.ArtifactStagingDirectory)\out\$(buildFolder)
        sourceFolder: $(Build.ArtifactStagingDirectory)

    # copy to SDK partner release storage
    - task: AzureFileCopy@2
      displayName: 'Copy Release Artifacts to Partner Release Pipeline'
      condition: ${{ parameters.release }}
      inputs:
        SourcePath: $(Build.ArtifactStagingDirectory)\out
        azureSubscription: azuresdkpartnerdrops
        Destination: AzureBlob
        storage: azuresdkpartnerdrops
        ContainerName: 'drops/azure-iot-sdk/node/'
